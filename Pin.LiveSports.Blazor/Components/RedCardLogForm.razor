<div class="card shadow-lg border-0 bg-light my-3 w-75 m-auto">

	<div class="card-header bg-danger bg-opacity-75 text-white text-center">
		<h5 class="mb-0">Red Card</h5>
	</div>

	<div class="card-body">

		<div class="mb-3">
			<label for="eventMinute" class="form-label fw-bold">Minute</label>
			<input type="number" @bind="eventMinute" class="form-control" />
		</div>

		<div class="mb-3">
			<label class="form-label fw-bold">Team</label>
			<select @onchange="HandleTeamSelection" class="form-control">
				<option value="" disabled selected>Select a team</option>
				@if (Matchup != null)
				{
					<option value="@Matchup.TeamA.Name">@Matchup.TeamA.Name</option>
					<option value="@Matchup.TeamB.Name">@Matchup.TeamB.Name</option>
				}
			</select>
		</div>

		@if (!string.IsNullOrEmpty(selectedTeam) && players.Count > 0)
		{
			<div class="mb-3">
				<label class="form-label fw-bold">Player</label>
				<select @bind="selectedPlayer" class="form-control">
					<option value="" disabled selected>Select a player</option>
					@foreach (var player in players)
					{
						<option value="@player.Name">@player.Name</option>
					}
				</select>
			</div>
		}

		<div class="text-center">
			<button class="btn btn-danger text-light" @onclick="SubmitRedCardLog">
				<img src="images/red-card.png" alt="Red Card" class="img-fluid" style="max-height: 20px;" />
				Submit
			</button>
			<button class="btn btn-secondary" @onclick="OnClose">Cancel</button>
		</div>
	</div>
</div>

@code {
	[Parameter] public Matchup? Matchup { get; set; }
	[Parameter] public EventCallback<ReportEventLog> SubmitLogCallback { get; set; }
	[Parameter] public EventCallback OnClose { get; set; }

	private string? selectedTeam;
	private string? selectedPlayer;
	private int eventMinute;
	private List<Player> players = new();

	private void HandleTeamSelection(ChangeEventArgs e)
	{
		selectedTeam = e.Value?.ToString();
		LoadPlayers();
	}

	private void LoadPlayers()
	{
		if (selectedTeam == Matchup?.TeamA.Name)
			players = Matchup.TeamA.Squad.Where(p => p.IsPlaying && !p.IsDisqualified).ToList();
		else if (selectedTeam == Matchup?.TeamB.Name)
			players = Matchup.TeamB.Squad.Where(p => p.IsPlaying && !p.IsDisqualified).ToList();
		else
			players = new List<Player>();
	}

	private async Task SubmitRedCardLog()
	{
		if (string.IsNullOrEmpty(selectedTeam) || string.IsNullOrEmpty(selectedPlayer))
			return;

		var log = new ReportEventLog
			{
				Minute = eventMinute,
				Type = "Red Card",
				Team = selectedTeam,
				Player = selectedPlayer,
				Description = $"{selectedPlayer} received a red card and is disqualified.",
				Details = $"Red card issued to {selectedPlayer} at minute {eventMinute}. The player must leave the field.",
			};

		await SubmitLogCallback.InvokeAsync(log);

		LoadPlayers();
		await OnClose.InvokeAsync();
	}

	protected override void OnInitialized()
	{
		if (Matchup != null)
			eventMinute = Matchup.CurrentMinute;
	}
}
