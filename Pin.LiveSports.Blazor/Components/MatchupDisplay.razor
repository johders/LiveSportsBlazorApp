<div class="row text-center border w-100 m-auto bg-opacity-25 bg-secondary rounded-3 my-3">

    <div class="col-5 p-3 my-4">
        <img src="@Matchup.TeamA.Crest"
             alt="@Matchup.TeamA.Name Crest"
             class="img-fluid mb-2 mx-auto d-block"
             style="max-height: 100px;" />
        <h4>@Matchup.TeamA.Name</h4>
    </div>

    <div class="col-2 d-flex align-items-center justify-content-center my-4">
        <div class="d-flex flex-column align-items-center">
            <h5 class="@currentMinuteClass mb-2 fw-bold h4">@Matchup.CurrentMinute'</h5>
            <p class="h1 fw-bold mb-0">@Matchup.TeamAScore - @Matchup.TeamBScore</p>
        </div>
    </div>

    <div class="col-5 p-3 my-4">
        <img src="@Matchup.TeamB.Crest"
             alt="@Matchup.TeamB.Name Crest"
             class="img-fluid mb-2 mx-auto d-block"
             style="max-height: 100px;" />
        <h4>@Matchup.TeamB.Name</h4>
    </div>
</div>

@* <div class="row mt-4">

    <div class="col-md-6">
        <h5>@Matchup.TeamA.Name - Playing</h5>
        <ul>
            @foreach (var player in Matchup.TeamA.Squad.Where(p => p.IsPlaying))
            {
                <li>@player.Name (@player.Position)</li>
            }
        </ul>
        <h5>@Matchup.TeamA.Name - Benched</h5>
        <ul>
            @foreach (var player in Matchup.TeamA.Squad.Where(p => !p.IsPlaying))
            {
                <li>@player.Name (@player.Position)</li>
            }
        </ul>
    </div>

    <div class="col-md-6">
        <h5>@Matchup.TeamB.Name - Playing</h5>
        <ul>
            @foreach (var player in Matchup.TeamB.Squad.Where(p => p.IsPlaying))
            {
                <li>@player.Name (@player.Position)</li>
            }
        </ul>
        <h5>@Matchup.TeamB.Name - Benched</h5>
        <ul>
            @foreach (var player in Matchup.TeamB.Squad.Where(p => !p.IsPlaying))
            {
                <li>@player.Name (@player.Position)</li>
            }
        </ul>
    </div>
</div> *@

@code {
    [Parameter]
    public Matchup Matchup { get; set; }

    private string currentMinuteClass = "";

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(currentMinuteClass))
        {
            return;
        }

        currentMinuteClass = "blink";
        _ = ResetBlinkClassAsync();
    }

    private async Task ResetBlinkClassAsync()
    {
        await Task.Delay(500);
        currentMinuteClass = "";
        StateHasChanged();
    }
}
