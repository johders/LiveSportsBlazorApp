@page "/live"

@inject NavigationManager Navigation
@inject ICompetitionService CompetitionService
@inject IReportService ReportService

@implements IAsyncDisposable

<PageTitle>World Cup Live</PageTitle>

@if (liveMatchup != null)
{
	<MatchupDisplay Matchup="liveMatchup" />

	<h5>Event Logs</h5>
	<div>
		@foreach (var log in liveMatchup.EventLogs)
		{
			<div class="alert alert-secondary">
				<strong>@log.Minute':</strong> @log.Description<br />
				<em>@log.Details</em>
			</div>
		}
	</div>
}

<ul id="messageList">
	@foreach (var message in messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	private HubConnection? hubConnection;
	private List<string> messages = new();

	private Matchup? liveMatchup;

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			messages = ReportService.GetMessages();
			InvokeAsync(StateHasChanged);
		});

		hubConnection.On<Matchup>("ReceiveMatchup", (matchup) =>
		{
			liveMatchup = ReportService.GetMatchup();
			InvokeAsync(StateHasChanged);
		});

		hubConnection.On<ReportEventLog>("ReceiveEventLog", (eventLog) =>
		{
			if (liveMatchup is not null)
			{
				liveMatchup.EventLogs = ReportService.GetEventLogs();
			}

			InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
