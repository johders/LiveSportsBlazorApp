@page "/live"

@inject NavigationManager Navigation
@inject ICompetitionService CompetitionService
@inject IReportService ReportService

@implements IAsyncDisposable

<PageTitle>World Cup Live</PageTitle>

@if (liveMatchup != null)
{
	<MatchupDisplay Matchup="liveMatchup" />

	<GoalSummary Matchup="liveMatchup" />

	<h2 class="left-border fw-bold my-0">&nbsp;Fase per fase</h2>
	if (liveMatchup.EventLogs.Count > 0 && string.IsNullOrEmpty(endDateTime))
	{
		<p class="left-border-min">&nbsp; last update @minutesSinceLastUpdate minutes ago</p>
	}
	else if (!string.IsNullOrEmpty(endDateTime))
	{
		<p class="left-border-min">&nbsp; game ended on @endDateTime</p>
	}
	<div class="container">
		@foreach (var log in liveMatchup?.EventLogs ?? Enumerable.Empty<ReportEventLog>())
		{
			<div class="row align-items-start mb-4">
				<div class="col-1 d-flex flex-column align-items-center">
					<div class="time-indicator">
						<i class="bi bi-clock me-2"></i> @log.Minute'
					</div>
					<div class="vertical-line"></div>
				</div>

				<div class="col-7">
					@if (log.Type.Contains("Card"))
					{
						<div class="card-event d-flex align-items-center p-2 bg-light">
							<img src="images/@(log.Type == "Yellow Card" ? "yellow-card.png" : "red-card.png")"
								 alt="@log.Type" class="card-icon me-3" />
							<div>
								<h5 class="mb-0 player-highlight">@log.Player</h5>
								<p class="mb-0 text-muted">@log.Team</p>
							</div>
						</div>
					}
					else if (log.Type == "Manual")
					{
						<div class="manual-event p-3">
							<h5>@log.Description</h5>
							<p class="mb-0 text-muted">@log.Details</p>
						</div>
					}
					else if (log.Type == "Substitution")
					{
						<div class="substitution-event p-2 bg-light rounded position-relative">
							<p class="text-center text-muted mb-2">substitution</p>

							<div class="d-flex align-items-center justify-content-center position-relative">
								<div class="text-start pe-3">
									<h5 class="player-highlight mb-0 fw-bold">@log.PlayerOut</h5>
								</div>

								<div class="d-flex align-items-center">
									<img src="images/out-arrow.png" alt="Player Out" class="arrow-icon me-2" />
									<div class="vertical-line"></div>
									<img src="images/in-arrow.png" alt="Player In" class="arrow-icon ms-2" />
								</div>

								<div class="text-end ps-3">
									<h5 class="player-highlight mb-0 fw-bold">@log.PlayerIn</h5>
								</div>

							</div>
								<p class="text-muted m-2">@log.Team</p>
						</div>
					}
					else if (log.Type == "Goal")
					{
						<div class="substitution-event p-3">
							<h5>@log.Description</h5>
							<p class="mb-0 text-muted">@log.Details</p>
						</div>
					}

					else if (log.Type == "Stop")
					{
						<div class="substitution-event p-3">
							<h5>@log.Description</h5>
							<p class="mb-0 text-muted">@log.Details</p>
						</div>
					}
				</div>
			</div>
		}
	</div>
}
else
{
	<div class="d-flex vh-100 flex-column justify-content-center align-items-center text-center">
		@if (competition?.Emblem != null)
		{
			<div class="mb-4">
				<img src="@competition.Emblem" alt="Competition Emblem" class="img-fluid" style="max-height: 200px;">
			</div>
		}

		<div class="spinner-border mb-3 spinner-custom" role="status" style="width: 4rem; height: 4rem;">
			<span class="visually-hidden">Loading...</span>
		</div>
		<h3 class="text-muted">Waiting for the next game...</h3>
	</div>
}

@code {
	private HubConnection? hubConnection;
	private Matchup? liveMatchup;
	private Competition? competition;
	private int minutesSinceLastUpdate = 0;
	private string endDateTime = string.Empty;

	private async Task GetCompetition()
	{
		var competitionResult = await CompetitionService.GetCompetitionAsync();

		if (competitionResult.Success)
		{
			competition = competitionResult.Data;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		hubConnection.On<int>("UpdateMinute", (minute) =>
		{
			if (liveMatchup is not null)
			{
				liveMatchup.CurrentMinute = minute;
				if (liveMatchup.EventLogs.Count > 0)
				{
					minutesSinceLastUpdate = minute - liveMatchup.EventLogs.First().Minute;
				}
				InvokeAsync(StateHasChanged);
			}
		});

		hubConnection.On<Matchup>("ReceiveMatchup", (matchup) =>
		{
			liveMatchup = ReportService.GetMatchup();
			InvokeAsync(StateHasChanged);
		});

		hubConnection.On<ReportEventLog>("ReceiveEventLog", (eventLog) =>
		{
			if (liveMatchup is not null)
			{
				liveMatchup = ReportService.GetMatchup();
				IsGameOverCheck();
				InvokeAsync(StateHasChanged);
			}
		});

		await hubConnection.StartAsync();
		await GetCompetition();
	}

	private void IsGameOverCheck()
	{
		if (liveMatchup?.EventLogs.Any(e => e.Type == "Stop") == true)
		{
			endDateTime = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt");
		}
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
