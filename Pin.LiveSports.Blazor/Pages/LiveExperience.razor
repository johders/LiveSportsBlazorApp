@page "/live"

@inject NavigationManager Navigation
@inject ICompetitionService CompetitionService
@inject IReportService ReportService

@implements IAsyncDisposable

<PageTitle>World Cup Live</PageTitle>

@if (liveMatchup != null)
{
	<MatchupDisplay Matchup="liveMatchup" />

	<h5>Fase per fase</h5>

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

	<div class="container">
		@foreach (var log in liveMatchup?.EventLogs ?? Enumerable.Empty<ReportEventLog>())
		{
			<div class="row align-items-start mb-4">
				<div class="col-1 d-flex flex-column align-items-center">
					<div class="time-indicator">
						<i class="bi bi-clock me-2"></i> @log.Minute'
					</div>
					<div class="vertical-line flex-grow-1"></div>
				</div>

				<div class="col-7">
					@if (log.Type.Contains("Card"))
					{
						<div class="card-event d-flex align-items-center p-2 bg-light">
							<img src="images/@(log.Type == "Yellow Card" ? "yellow-card.png" : "red-card.png")"
								 alt="@log.Type" class="card-icon me-3" />
							<div>
								<h5 class="mb-0 player-carded">@log.Player</h5>
								<p class="mb-0 text-muted">@log.Team</p>
							</div>
						</div>
					}
					else if (log.Type == "Manual")
					{
						<div class="manual-event p-3">
							<h5>@log.Description</h5>
							<p class="mb-0 text-muted">@log.Details</p>
						</div>
					}
				</div>
			</div>
		}
	</div>
}

@code {
	private HubConnection? hubConnection;
	private Matchup? liveMatchup;

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		hubConnection.On<int>("UpdateMinute", (minute) =>
	{
	if (liveMatchup is not null)
	{
		liveMatchup.CurrentMinute = minute;
	}

	InvokeAsync(StateHasChanged);
	});

		hubConnection.On<Matchup>("ReceiveMatchup", (matchup) =>
		{
			liveMatchup = ReportService.GetMatchup();
			InvokeAsync(StateHasChanged);
		});

		hubConnection.On<ReportEventLog>("ReceiveEventLog", (eventLog) =>
		{
			if (liveMatchup is not null)
			{
				liveMatchup.EventLogs = ReportService.GetEventLogs();
			}

			InvokeAsync(StateHasChanged);
		});

		await hubConnection.StartAsync();
	}

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
