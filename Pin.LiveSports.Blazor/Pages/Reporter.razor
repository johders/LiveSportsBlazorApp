@page "/reporter"

@inject NavigationManager Navigation
@inject IReportService ReportService
@inject ICompetitionService CompetitionService

<PageTitle>Report</PageTitle>

@if (matchup != null && matchup.StartTime != null)
{
	<ActionButton ButtonText="Start Game"
				  ButtonClass="btn-primary"
				  OnClick="StartGame"
				  IsDisabled="@isGameRunning" />

	<ActionButton ButtonText="Stop Game"
				  ButtonClass="btn-danger"
				  OnClick="ShowStopGameModal" />

	<MatchupDisplay Matchup="matchup" />
	<GoalSummary Matchup="matchup" />

}
else if (matchup != null)
{
	<div class="d-flex vh-100 flex-column justify-content-center align-items-center text-center">
		@if (competition?.Emblem != null)
		{
			<div class="mb-4">
				<img src="@competition.Emblem" alt="Competition Emblem" class="img-fluid" style="max-height: 200px;">
			</div>
		}

		<div class="d-flex flex-column align-items-center mb-3">
			<label for="startTime" class="form-label fw-bold text-center">Set Start Time</label>
			<input type="time" id="startTime" @onchange="HandleStartTimeChange" class="form-control w-auto" style="max-width: 200px;" />
		</div>

		<div class="row align-items-center text-center">

			<div class="col-5 p-3">
				<img src="@matchup.TeamA.Crest"
					 alt="@matchup.TeamA.Name Crest"
					 class="img-fluid mb-2 mx-auto d-block"
					 style="max-height: 50px;" />
				<span class="team-underline">@matchup.TeamA.Name</span>
			</div>

			<div class="col-2 d-flex align-items-center justify-content-center my-4">
				<div class="d-flex flex-column align-items-center">
					<p class="h5">vs</p>
				</div>
			</div>

			<div class="col-5 p-3">
				<img src="@matchup.TeamB.Crest"
					 alt="@matchup.TeamB.Name Crest"
					 class="img-fluid mb-2 mx-auto d-block"
					 style="max-height: 50px;" />
				<span class="team-underline">@matchup.TeamB.Name</span>
			</div>
		</div>

		<ActionButton ButtonText="Report Game"
					  ButtonClass="btn-success"
					  OnClick="SetTimeAndSendMatchup"
					  IsDisabled="isReportButtonDisabled" />
	</div>
}

@if (isGameRunning)
{
	<ReporterDashboard OnLogTypeSelected="HandleLogTypeSelected" />

	@if (selectedLogType == "Manual")
	{
		<ManualLogForm CurrentMinute="matchup.CurrentMinute" SubmitLogCallback="SubmitManualLog" OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "YellowCard")
	{
		<YellowCardLogForm Matchup="matchup" SubmitLogCallback="SubmitYellowCardLog" OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "RedCard")
	{
		<RedCardLogForm Matchup="matchup" SubmitLogCallback="SubmitRedCardLog" OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "Substitution")
	{
		<SubstitutionLogForm Matchup="matchup" SubmitLogCallback="SubmitSubstitutionLog" OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "Goal")
	{
		<GoalLogForm Matchup="matchup" SubmitLogCallback="SubmitGoalLog" OnClose="CloseLogForm" />
	}
}

<ConfirmationModal @ref="stopGameModal"
				   Title="Confirm Stop Game"
				   Message="Are you sure you want to stop the game?"
				   ConfirmButtonText="Stop Game"
				   CancelButtonText="Cancel"
				   OnConfirm="StopGame"
				   OnCancel="CloseStopGameModal" />


@code {
	private HubConnection? hubConnection;

	private Matchup? matchup;
	private Competition? competition;
	private string? selectedLogType;
	private ConfirmationModal? stopGameModal;

	private bool isGameRunning = false;
	private CancellationTokenSource? gameTimerCts;

	private bool isReportButtonDisabled = true;
	private string? startTime;

	private async Task GetCompetition()
	{
		var competitionResult = await CompetitionService.GetCompetitionAsync();

		if (competitionResult.Success)
		{
			competition = competitionResult.Data;
		}
	}

	private void HandleStartTimeChange(ChangeEventArgs e)
	{
		startTime = e.Value?.ToString();
		isReportButtonDisabled = string.IsNullOrEmpty(startTime);
	}

	private async Task SetTimeAndSendMatchup()
	{
		if (startTime == null)
		{
			startTime = DateTime.Now.AddMinutes(15).ToShortTimeString();
		}

		matchup.StartTime = startTime;

		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendMatchup", matchup);
		}
	}

	private async Task GenerateMatchup()
	{
		var matchupResult = await CompetitionService.GenerateMatchupAsync();

		if (matchupResult.Success)
		{
			matchup = matchupResult.Data;
			matchup.CurrentMinute = 0;
			//matchup.StartTime = startTime.Value.ToShortTimeString();
			isGameRunning = false;

			// if (hubConnection is not null && IsConnected)
			// {
			// 	await hubConnection.SendAsync("SendMatchup", matchup);
			// }
		}
	}

	private async Task SubmitManualLog(ReportEventLog log)
	{
		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendEventLog", log);
			RefreshGame();
		}
	}

	private async Task SubmitYellowCardLog(ReportEventLog log)
	{
		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendYellowCardLog", log);
			RefreshGame();
		}
	}

	private async Task SubmitRedCardLog(ReportEventLog log)
	{
		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendRedCardLog", log);
			RefreshGame();
		}
	}

	private async Task SubmitSubstitutionLog(ReportEventLog log)
	{
		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendSubstitutionLog", log);
			RefreshGame();
		}
	}

	private async Task SubmitGoalLog(ReportEventLog log)
	{
		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendGoalLog", log);
			RefreshGame();
		}
	}

	private void RefreshGame()
	{
		matchup = ReportService.GetMatchup();
	}

	private async Task StartGame()
	{
		if (isGameRunning || matchup == null) return;

		isGameRunning = true;
		gameTimerCts = new CancellationTokenSource();


		while (!gameTimerCts.Token.IsCancellationRequested && matchup.CurrentMinute < 90)
		{
			await Task.Delay(5333, gameTimerCts.Token);
			matchup.CurrentMinute++;

			if (hubConnection is not null && IsConnected)
			{
				await hubConnection.SendAsync("BroadcastMinute", matchup.CurrentMinute);
			}

			StateHasChanged();

			if (matchup.CurrentMinute == 45)
			{
				// Half-time logic can be added here, e.g., pause or notify
			}
		}
	}

	private void ShowStopGameModal()
	{
		stopGameModal?.Show();
	}

	private void CloseStopGameModal()
	{
		stopGameModal?.Hide();
	}

	private async Task StopGame()
	{
		gameTimerCts?.Cancel();
		isGameRunning = false;
		if (matchup != null)
		{
			matchup.CurrentMinute = 0;
		}

		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("StopGame", matchup, new ReportEventLog { Type = "Stop", Description = "Game ended", Details = "It is over" });
		}

		matchup = null;
		CloseStopGameModal();
	}

	private void HandleLogTypeSelected(string logType)
	{
		selectedLogType = logType;
	}

	private void CloseLogForm()
	{
		selectedLogType = null;
	}

	protected override async Task OnInitializedAsync()
	{

		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		await hubConnection.StartAsync();
		await GetCompetition();
		await GenerateMatchup();
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
