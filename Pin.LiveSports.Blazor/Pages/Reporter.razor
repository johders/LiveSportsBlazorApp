@page "/reporter"

@inject NavigationManager Navigation
@inject IReportService ReportService
@inject ICompetitionService CompetitionService

<PageTitle>Report</PageTitle>

<ActionButton ButtonText="Get Next Game"
			  ButtonClass="btn-success"
			  OnClick="GenerateMatchup"
			  IsDisabled="@(matchup != null)" />

@if (matchup != null)
{
	<ActionButton ButtonText="Start Game"
				  ButtonClass="btn-primary"
				  OnClick="StartGame"
				  IsDisabled="@isGameRunning" />

	<ActionButton ButtonText="Stop Game"
				  ButtonClass="btn-danger"
				  OnClick="ShowStopGameModal" />

	<MatchupDisplay Matchup="matchup"/>
}

@if (isGameRunning){
	<ReporterDashboard OnLogTypeSelected="HandleLogTypeSelected" />

	@if (selectedLogType == "Manual")
	{
		<ManualLogForm SubmitLogCallback="SubmitLog" OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "YellowCard")
	{
		<YellowCardLogForm Matchup="matchup"
						   HubConnection="hubConnection"
						   IsConnected="IsConnected"
						   OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "RedCard")
	{
		<RedCardLogForm Matchup="matchup"
						HubConnection="hubConnection"
						IsConnected="IsConnected"
						OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "Substitution")
	{
		<SubstitutionLogForm Matchup="matchup"
						HubConnection="hubConnection"
						IsConnected="IsConnected"
						OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "Goal")
	{
		<GoalLogForm Matchup="matchup"
					 HubConnection="hubConnection"
					 IsConnected="IsConnected"
					 OnClose="CloseLogForm" />
	}
	else if (selectedLogType == "AnotherLog")
	{
		<!-- Future log components can go here -->
	}
}

<ConfirmationModal @ref="stopGameModal"
				   Title="Confirm Stop Game"
				   Message="Are you sure you want to stop the game?"
				   ConfirmButtonText="Stop Game"
				   CancelButtonText="Cancel"
				   OnConfirm="StopGame"
				   OnCancel="CloseStopGameModal" />


@code {
	private HubConnection? hubConnection;

	private Matchup? matchup;
	private string? selectedLogType;
	private ConfirmationModal? stopGameModal;

	private bool isGameRunning = false;
	private CancellationTokenSource? gameTimerCts;

	private async Task GenerateMatchup()
	{
		var matchupResult = await CompetitionService.GenerateMatchupAsync();

		if (matchupResult.Success)
		{
			matchup = matchupResult.Data;
			matchup.CurrentMinute = 0;
			isGameRunning = false;

			if (hubConnection is not null && IsConnected)
			{
				await hubConnection.SendAsync("SendMatchup", matchup);
			}
		}
	}

	private async Task SubmitLog(ReportEventLog log)
	{
		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendEventLog", log);
		}
	}

	private async Task StartGame()
	{
		if (isGameRunning || matchup == null) return;

		isGameRunning = true;
		gameTimerCts = new CancellationTokenSource();


		while (!gameTimerCts.Token.IsCancellationRequested && matchup.CurrentMinute < 90)
		{
			await Task.Delay(5333, gameTimerCts.Token);
			matchup.CurrentMinute++;

			if (hubConnection is not null && IsConnected)
			{
				await hubConnection.SendAsync("BroadcastMinute", matchup.CurrentMinute);
			}

			StateHasChanged();

			if (matchup.CurrentMinute == 45)
			{
				// Half-time logic can be added here, e.g., pause or notify
			}
		}
	}

	private void ShowStopGameModal()
	{
		stopGameModal?.Show();
	}

	private void CloseStopGameModal()
	{
		stopGameModal?.Hide();
	}

	private void StopGame()
	{
		gameTimerCts?.Cancel();
		isGameRunning = false;
		if (matchup != null)
		{
			matchup.CurrentMinute = 0;
		}
		matchup = null;
		CloseStopGameModal();
	}

	private void HandleLogTypeSelected(string logType)
	{
		selectedLogType = logType;
	}

	private void CloseLogForm()
	{
		selectedLogType = null;
	}

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		await hubConnection.StartAsync();
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
