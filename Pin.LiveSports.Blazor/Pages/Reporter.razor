@page "/reporter"

@inject NavigationManager Navigation
@inject IReportService ReportService
@inject ICompetitionService CompetitionService

<PageTitle>Report</PageTitle>

<ActionButton ButtonText="Get Today's Matchup"
			  ButtonClass="btn-success"
			  OnClick="GenerateMatchup"
			  IsDisabled="@(matchup != null)"/>

@if (matchup != null)
{
    <MatchupDisplay Matchup="matchup" />
}

<ReporterDashboard OnLogTypeSelected="HandleLogTypeSelected" />

@if (selectedLogType == "Manual")
{
	<ManualLogForm HubConnection="hubConnection"
				   IsConnected="IsConnected"
				   OnClose="CloseLogForm" />
}
else if (selectedLogType == "YellowCard")
{
	<YellowCardLogForm Matchup="matchup"
					   HubConnection="hubConnection"
					   IsConnected="IsConnected"
					   OnClose="CloseLogForm" />
}
else if (selectedLogType == "RedCard")
{
	<RedCardLogForm Matchup="matchup"
					HubConnection="hubConnection"
					IsConnected="IsConnected"
					OnClose="CloseLogForm" />
}
else if (selectedLogType == "AnotherLog")
{
	<!-- Future log components can go here -->
}

@code {
	private HubConnection? hubConnection;

	private Matchup? matchup;
	private string? selectedLogType;

	private async Task GenerateMatchup()
	{
		var matchupResult = await CompetitionService.GenerateMatchupAsync();

		if (matchupResult.Success)
		{
			matchup = matchupResult.Data;

			if (hubConnection is not null && IsConnected)
			{
				await hubConnection.SendAsync("SendMatchup", matchup);
			}
		}
	}

	private void HandleLogTypeSelected(string logType)
	{
		selectedLogType = logType;
	}

	private void CloseLogForm()
	{
		selectedLogType = null;
	}

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		await hubConnection.StartAsync();
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
