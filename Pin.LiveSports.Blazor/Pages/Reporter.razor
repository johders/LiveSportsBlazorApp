@page "/reporter"

@inject NavigationManager Navigation
@inject IReportService ReportService
@inject ICompetitionService CompetitionService

<PageTitle>Report</PageTitle>

<ActionButton ButtonText="Get Today's Matchup"
			  ButtonClass="btn-success"
			  OnClick="GenerateMatchup"
			  IsDisabled="@(matchup != null)"/>

@if (matchup != null)
{
    <MatchupDisplay Matchup="matchup" />
}

<h5>Manual Event Log</h5>
<div class="form-group">
	<label>Minute:</label>
	<input type="number" @bind="eventMinute" class="form-control" />
</div>
<div class="form-group">
	<label>Description:</label>
	<input type="text" @bind="eventDescription" class="form-control" />
</div>
<div class="form-group">
	<label>Details:</label>
	<textarea @bind="eventDetails" class="form-control"></textarea>
</div>
<div class="form-group">
	<button class="btn btn-info" @onclick="SendLogEvent">Submit Event</button>
</div>

<h5>Score Update</h5>
<div class="form-group">
	<button class="btn btn-primary" @onclick="UpdateScore">Update Score</button>
</div>

@code {
	private HubConnection? hubConnection;

	private Matchup? matchup;
	private int eventMinute;
	private string eventDescription = string.Empty;
	private string eventDetails = string.Empty;

	private string? selectedTeam;
	private string? selectedPlayer;
	private string? selectedCard;
	private string? selectedPlayerOut;
	private string? selectedPlayerIn;

	private async Task GenerateMatchup()
	{
		var matchupResult = await CompetitionService.GenerateMatchupAsync();

		if (matchupResult.Success)
		{
			matchup = matchupResult.Data;

			if (hubConnection is not null && IsConnected)
			{
				await hubConnection.SendAsync("SendMatchup", matchup);
			}
		}
	}
	
	private async Task SendLogEvent()
	{
		var log = new ReportEventLog
			{
				Minute = eventMinute,
				Type = "Manual",
				Description = eventDescription,
				Details = eventDetails,
			};

		if (hubConnection is not null && IsConnected)
		{
			await hubConnection.SendAsync("SendEventLog", log);
		}
	}


	private async Task UpdateScore()
	{
		if (matchup != null && hubConnection is not null)
		{
			matchup.TeamAScore++;
			await hubConnection.SendAsync("SendScoreUpdate", matchup.TeamA.Name, matchup.TeamAScore, matchup.TeamBScore);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		hubConnection = new HubConnectionBuilder()
			.WithUrl(Navigation.ToAbsoluteUri(AppConstants.HubUrl))
			.Build();

		await hubConnection.StartAsync();
	}

	public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if (hubConnection is not null)
		{
			await hubConnection.DisposeAsync();
		}
	}
}
